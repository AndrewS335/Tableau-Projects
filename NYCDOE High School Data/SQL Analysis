This is a continuation from the last file whereby I add on to the set ofqueries finding out datapoints for schools. 
The focus of this file is to offer a list of queries focusing only 
on case statements by using joins, aggregation functions, and sub-queries as well. 
This file contains multiple examples for each case statement example 
and I hope this helps in your journey of using case statements in different formats!

The first case statement allows me to rank high schools 
based on their average advanced regents cohort rate. 
The ratings I will use for this case statement is "low rating" for schools whose advanced regents cohort rate is between 0.0 and 25.0, 
"improving rate" for schools whose advanced regents cohort rate is between 25.1 and 50.0, 
"slightly improving rate" for schools whose advanced regents cohort rate is between 50.1 and 75.0, 
and "high rate" for all other schools who does not fit into the previous three categories, 
this is for schools with an advanced regents cohort rate of 75.1 or higher. 

SELECT 
  School_name,
  __Advanced_Regents_of_Cohort,
CASE 
  WHEN __Advanced_Regents_of_Cohort between '0.0' and '25.0' THEN 'Low rate'
  WHEN __Advanced_Regents_of_Cohort between '25.1' and '50.0' THEN 'Improving rate'
  WHEN __Advanced_Regents_of_Cohort between '50.1' and '75.0' THEN 'Slightly improving rate'
  WHEN __Advanced_Regents_of_Cohort between '75.0' and '90.0' THEN 'High rate'
  ELSE 'Perfect rate' END AS Advanced_regents_rate
 FROM `nycdoe-high-schools.2021_Graduation_Rates.2021_Graduation_Rates`
 WHERE 
  __Advanced_Regents_of_Cohort IS NOT NULL
ORDER BY
  __Advanced_Regents_of_Cohort ASC;
  
  
 The second case statement focuses on classifying the size of the high schools cohorts 
 by using the following classifications: "small cohort" for cohort sizes between 0 and 100 students, 
 "medium cohort" for cohort sizes between 101 and 300 students, and everything else is classified as 
 "large cohorts".
 
 SELECT 
  School_name,
  __Total_Cohort,
CASE 
  WHEN __Total_Cohort between 0 and 100 THEN 'Small cohort'
  WHEN __Total_Cohort between 101 and 300 THEN 'Medium cohort'
  ELSE 'Large cohort' END AS total_cohort
 FROM `nycdoe-high-schools.2021_Graduation_Rates.2021_Graduation_Rates`
 WHERE 
  __Total_Cohort IS NOT NULL
ORDER BY
  __Total_Cohort ASC;
  
 
The third case statement focuses on giving initials to each of the boroughs in New York City, 
in this case statement we will classify "Manhattan" as "M", "Brooklyn" as "BK", "Staten Island" as "SI",
"Queens" as "Q", and "Bronx" as "BX". 

SELECT 
  School_name,
  Borough,
CASE 
  WHEN Borough = 'MANHATTAN' THEN 'M'
  WHEN Borough = 'BRONX' THEN 'BX'
  WHEN Borough = 'BROOKLYN' THEN 'BK'
  WHEN Borough = 'STATEN IS' THEN 'SI'
  WHEN Borough = 'QUEENS' THEN 'Q'
  ELSE 'NULL'
END AS Borough_Initial
FROM `nycdoe-high-schools.2021_Graduation_Rates.2021_Directory`;

The fourth case statement focuses on combining case statements with aggregrate functions and subqueries. 
In this case statement I count the total number of school cohorts in each category. The total count is 
ordered in descending order. 

SELECT A.total_Cohort, count(total_cohort) as total_schools
FROM
  (SELECT 
  School_name,
  __Total_Cohort,
CASE 
  WHEN __Total_Cohort between 0 and 100 THEN 'Small cohort'
  WHEN __Total_Cohort between 101 and 300 THEN 'Medium cohort'
  ELSE 'Large cohort' END AS total_cohort
 FROM `nycdoe-high-schools.2021_Graduation_Rates.2021_Graduation_Rates`
 WHERE 
  __Total_Cohort IS NOT NULL
ORDER BY
  __Total_Cohort ASC) AS A
GROUP BY total_cohort
ORDER BY total_cohort desc;

The fifth case statement rates schools by their attendance rating by classifying schools in two categories:
"Exceptional" for schools with an attendance rating of 90% or higher and those schools whose attendance
rating is less than 90% is classified as "Needs Improvement". Additionally, this case statement integrates a
left join to join two datasets. 

SELECT 
  DIR.school_name,  
  ROUND(AVG(DIR.attendance_rate) *100,0) AS AVG_ATTENDANCE_RATE, 
CASE 
  WHEN ROUND(AVG(DIR.attendance_rate) *100,0) > 90.0 THEN 'Exceptional'
  ELSE 'Needs Improvement'
END Rate_School_Attendance
FROM 
  nycdoe-high-schools.2021_Graduation_Rates.2021_Directory AS DIR 
LEFT JOIN 
  nycdoe-high-schools.2021_Graduation_Rates.2021_Demographics AS DEM 
ON 
  DIR.DBN = DEM.DBN 
WHERE 
  DIR.School_name IS NOT NULL AND
  DIR.attendance_rate IS NOT NULL
GROUP BY 
  DIR.SCHOOL_NAME
ORDER BY 
  AVG_ATTENDANCE_RATE DESC;
  
 
The sixth case statement will build off the last case statement by counting how many schools are 
in each category. In this case statement, we use a left join and subquery to pull in together the total count
of each category. 

SELECT A.RATE_SCHOOL_ATTENDANCE, count(Rate_School_Attendance) as total
FROM 
(
SELECT 
  DIR.school_name,  
  ROUND(AVG(DIR.attendance_rate) *100,0) AS AVG_ATTENDANCE_RATE, 
CASE 
  WHEN ROUND(AVG(DIR.attendance_rate) *100,0) > 90.0 THEN 'Exceptional'
  ELSE 'Needs Improvement'
END Rate_School_Attendance
FROM 
  nycdoe-high-schools.2021_Graduation_Rates.2021_Directory AS DIR 
LEFT JOIN 
  nycdoe-high-schools.2021_Graduation_Rates.2021_Demographics AS DEM 
ON 
  DIR.DBN = DEM.DBN 
WHERE 
  DIR.School_name IS NOT NULL AND
  DIR.attendance_rate IS NOT NULL
GROUP BY 
  DIR.SCHOOL_NAME
ORDER BY 
  AVG_ATTENDANCE_RATE DESC) as A
GROUP BY Rate_School_Attendance;


  
